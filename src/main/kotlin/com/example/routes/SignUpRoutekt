package com.example.routes

import com.example.domain.model.AuthRequest
import com.example.domain.model.EndPoint
import com.example.domain.model.User
import com.example.domain.repository.UserRepository
import com.example.security.HashingService
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun Route.signUp(
    hashService:HashingService,
    userRepository: UserRepository
){
    post(EndPoint.SignUp.path) {
        val request = call.receiveOrNull<AuthRequest>() ?: kotlin.run {
            call.respond(HttpStatusCode.BadRequest)
            return@post
        }

        val areFieldsBlank = request.email.isBlank() || request.password.isBlank()
        val isPasTooShort = request.password.length < 7
        if (areFieldsBlank || isPasTooShort) {
            call.respond(HttpStatusCode.Conflict)
            return@post
        }


        val saltedHash = hashService.generateSaltedHash(request.password)
        val user = User(
            name = request.username,
            email = request.email,
            password = saltedHash.hash,
            isEmailOpen = true,
            salt = saltedHash.salt
        )

        val isEmailHas = userRepository.getUserByEmail(request.email)
        if(isEmailHas == null) {
            val wasAcknowledged = userRepository.saveUserInfo(user)
            if (!wasAcknowledged) {
                call.respond(HttpStatusCode.Conflict)
                return@post
            }
        }else {
            if (isEmailHas.email == user.email) {
                call.respond(HttpStatusCode.Conflict)
                return@post
            }
        }


        call.respond(HttpStatusCode.OK)
    }
}
